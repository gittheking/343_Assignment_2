#BlueJ class context
comment0.params=n
comment0.target=Scheduler(int)
comment0.text=\n\ Constructor\ for\ objects\ of\ class\ Scheduler\n
comment1.params=
comment1.target=void\ createProc()
comment1.text=\n\ Method\ to\ store\ processes\ in\ the\ nums\ array.\n\ @param\ void\n\ @return\ void\n
comment10.params=
comment10.target=void\ sjf()
comment10.text=\n\ Method\ to\ simulate\ the\ Shortest\ Job\ First\ Process\ scheduling\ algorithm\n\ @param\ void\n\ @return\ void\ \n
comment11.params=
comment11.target=void\ roundRobin()
comment11.text=\n\ Method\ to\ simulate\ a\ Round\ Robin\ scheduling\ algorithm\n\ @param\ void\n\ @return\ void\n
comment12.params=
comment12.target=void\ custom()
comment12.text=\n\ Method\ to\ simulate\ a\ custom\ scheduling\ algorithm\ where\ the\ scheduler\ pulls\ the\ head\n\ of\ the\ queue\ and\ takes\ a\ peek\ at\ the\ next\ process.\ Once\ both\ values\ have\ been\ found,\n\ if\ the\ process\ that\ has\ been\ pulled\ is\ smaller\ it\ is\ executed,\ otherwise\ it\ thrown\ \n\ to\ the\ back\ of\ the\ queue\ and\ the\ process\ that\ is\ now\ the\ head\ is\ pulled\ out\ and\n\ executed.\n\ @param\ void\n\ @return\ void\ \n
comment13.params=
comment13.target=void\ MRoundRobin()
comment14.params=args
comment14.target=void\ main(java.lang.String[])
comment2.params=
comment2.target=void\ shuffle()
comment2.text=\n\ Method\ to\ shuffle\ the\ nums\ array\ as\ you\ would\ a\ deck\ of\ cards,\ by\ cutting\ the\ deck\ in\ half\ \n\ and\ then\ shuffle\ them\ in\ alternating\ order\n\ @param\ void\n\ @return\ void\n
comment3.params=
comment3.target=void\ createReadyQueue()
comment3.text=\n\ Method\ to\ create\ the\ ready\ queue\ with\ a\ "steady\ state"\ of\ 12\ processes\ from\ nums\ array\n\ for\ use\ with\ FCFS,\ RR,\ &\ MRR\n\ @param\ void\n\ @return\ void\n
comment4.params=
comment4.target=void\ createReadyQueueSJF()
comment4.text=\n\ Method\ to\ create\ the\ ready\ queue\ with\ a\ "steady\ state"\ of\ 12\ processes\ from\ sjfNums\ array\n\ for\ use\ with\ SJF\ only\n\ @param\ void\n\ @return\ void\n
comment5.params=n\ y
comment5.target=void\ updateReadyQueue(int,\ int)
comment5.text=\n\ Method\ to\ add\ n\ Processes\ to\ the\ ready\ queue,\ if\ n\ is\ too\ large\ then\ the\ rest\ of\ the\ \n\ available\ processes\ are\ added\n\ @param\ int\ n\n\ @param\ int\ y\n\ @return\ void\n
comment6.params=n\ y
comment6.target=void\ updateReadyQueueSJF(int,\ int)
comment6.text=\n\ Method\ to\ add\ n\ Processes\ to\ the\ ready\ queue,\ if\ n\ is\ too\ large\ then\ the\ rest\ of\ the\ \n\ available\ processes\ are\ added.\ For\ use\ with\ SJF\ only.\n\ @param\ int\ n\n\ @param\ int\ y\n\ @return\ void\n
comment7.params=
comment7.target=boolean\ update()
comment7.text=\n\ Method\ to\ determine\ if\ the\ ready\ queue\ should\ update\ or\ not\n\ @param\ void\n\ @return\ boolean\ up\n
comment8.params=
comment8.target=void\ resetVals()
comment9.params=
comment9.target=void\ fcfs()
comment9.text=\n\ Method\ to\ simulate\ the\ First\ Come\ First\ Served\ Process\ scheduling\ algorithm\n\ @param\ void\n\ @return\ void\ \n
numComments=15
